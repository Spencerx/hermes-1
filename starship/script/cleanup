#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'

options = OpenStruct.new
options.days = 7
options.env = "development"

OptionParser.new do |opts|
  opts.banner = "Usage: script/cleanup [options]"

  opts.on("-d", "--days N", "number of days to keep") do |days|
    options.days = days
  end

  opts.on("-e", "--env ENV", "rails environment to use") do |env|
    options.env = env
  end

  opts.on_tail("-h", "--help", "show this message") do
    puts opts
    exit
  end
end.parse!

puts "Initializing #{options.env} environment..."
RAILS_ENV = options.env
require File.dirname(__FILE__) + '/../config/boot'
require RAILS_ROOT+"/config/environment"

RAILS_DEFAULT_LOGGER.silence do
delete_time = Time.now - options.days.to_i*60*60*24
slice_length = 10000

notifications = Notification.find :all, :select => :id, :conditions => ["generated < ?", delete_time]
notifications.map! {|n| n.id}
@ncount = @npcount = 0

puts "Deleting #{notifications.length} notifications in blocks of #{slice_length}..."
while( not (slice = notifications.slice!(0,slice_length)).empty? )
  Notification.delete slice
  @ncount += slice.length
  print "  #@ncount notifications deleted, #{notifications.length} remaining. Deleting parameters... "
  STDOUT.flush
  nc = NotificationParameter.delete_all :notification_id => slice
  @npcount += nc
  puts "#{nc} deleted."
end

puts "#@ncount notifications with #@npcount parameters deleted.\n\n"

print "Deleting sent entries in messages_people... "
STDOUT.flush
@mpcount = MessagesPeople.delete_all ["sent < ?", delete_time]
puts "#@mpcount deleted."

messages = Message.find_by_sql <<-END_SQL
  SELECT m.id
  FROM messages m
  LEFT OUTER JOIN messages_people mp
    ON m.id = mp.message_id
  WHERE ISNULL(mp.message_id)
END_SQL
messages.map {|m| m.id}
@mcount = 0
puts "Deleting #{messages.length} unused messages in blocks of #{slice_length}..."
while( not (slice = messages.slice!(0,slice_length)).empty? )
  Message.delete slice
  @mcount += slice.length
  puts "  #@mcount deleted, #{messages.length} remaining."
end

puts "\nOptimizing tables..."
ActiveRecord::Base.connection.execute "OPTIMIZE TABLE notifications"
puts "  notifications optimized."
ActiveRecord::Base.connection.execute "OPTIMIZE TABLE notification_parameters"
puts "  notification_parameters optimized."
ActiveRecord::Base.connection.execute "OPTIMIZE TABLE messages"
puts "  messages optimized."
ActiveRecord::Base.connection.execute "OPTIMIZE TABLE messages_people"
puts "  messages_people optimized."
puts "done."
end
