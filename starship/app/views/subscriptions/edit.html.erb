<%
@title = "Edit Subscription - openSUSE Hermes"
@crumb_list = []
@crumb_list << link_to( "Subscriptions", :controller => :subscriptions, :action => :index )
@crumb_list << "Edit Subscription"
%>


<h2>Basic Subscription Parameters</h2>
<h3>Subscription to notification type: <%= MsgType.find(@subscr.msg_type_id).type_desc %></h3>

<script type="text/javascript">
  /* <![CDATA[ */
  $(function() {
    $('#add_filter').click(function(){
      add_filter_line("0", "0", "");
      return false;
    });

  });
  function add_filter_line(param, operator, value) {
    newline = $('<%= escape_javascript( render :partial => "filter", :locals => { :indx => "", :parameter_list => @avail_params, :selected_param => "0", :selected_oper => "0", :value => ""} )%>');
    $(newline.find('.param_select')[0]).val(param);
    $(newline.find('.filter_select')[0]).val(operator);
    $(newline.find('.filter_value_input')[0]).val(value);
    $('#filter_table').append( newline );
    recalc_filter_ids();
    return false;
  }

  /* ]]> */
</script>

<% form_for @subscr do |f| %>

  <p>
    <label>Description:</label><%= text_field_tag('subscr[description]', @subscr.description, :size => 50 ) %>
  </p>
  <p>
    <label>Comment:</label><%= link_to_function( "Enter Comment", nil, :id => "comment_link") do |page|
      page[:comment_box].toggle()
      page[:comment_link].hide()
    end %> (to help you remember what happens here)
  </p>
  <div id="comment_box" style="display: none; margin-left: 11em;">
    <%= text_area('subscr','comment', :size => "50x3") %>
  </div>
  <p>
    <label>Delay:</label><%= collection_select('subscr', 'delay_id', @availDelay, 'id','description') %>
  </p>
  <p>
    <label>Delivery:</label><%=  collection_select('subscr','delivery_id', @availDeliveries, 'id','description') %>
  </p>

  <% unless @subscr.abstraction_filters.blank? %>
    <h2>Predefined Filters</h2>
    <p>These filters are prepared by the Hermes system admin for you to pick. They should
      cover the most common use  cases.</p>
    <div style="margin-left: 50px;">
      <% @subscr.abstraction_filters.each { |id, abstraction| %>
      <% #debugger %>
        <p><%= check_box_tag "abstraction_filter[]", id, false %>
          <b><%= abstraction.summary %></b>
          <span style="margin-left: 10px; color: #999999;"><%= abstraction.description %></span>
        </p>
      <% } %>
    </div>
  <% end %>



  <h2>Parameter Filters</h2>
  <p>Note that all filters are combined with logical AND, that means they must match
    all to make the notification happen</p>
  <div style="margin-left:50px;">
    <p id="add_filter"><a href="#"><span>&raquo; Add another filter...</span></a></p>
    <table>
      <tbody id="filter_table" style="">
        <tr>
          <td>Parameter</td>
          <td>Operator</td>
          <td colspan="3">Value(s)</td>
        </tr>
        <% @filters.each_with_index  { |filt,i| %>
          <%= render :partial => 'filter', :locals => {:indx => i.to_s, :parameter_list => @avail_params, :selected_param => filt.parameter_id, :selected_oper => filt.operator, :value => filt.filterstring} %>
        <% }%>
      </tbody>
    </table>
  </div>

  <p>
    <%= hidden_field_tag 'filter_count',@filters.size %>
    <%= submit_tag "Update subscription" %>
  </p>

  <hr/>
  <h3>Hints for Filter Creation</h3>

  <p>Filters for subscriptions consist of three different settings:</p>
  <ol>
    <li><b>Parameter:</b> The first combo box contains a list of the parameters
      which belong to selected message type. The filter operation works on the
      content of the parameter.</li>
    <li><b>Operator:</b> The operator sets the type of the filter. There are some
      types of filters so far:</li>
    <ul>
      <li><b>oneof:</b> The oneof filter checks if the parameter value equals one
        of the list entries in value. The list of values is built by splitting the
        filter value at the commas.</li>
      <li><b>containsitem:</b> The containsitem filter checks if the list of
        filter values contains the value of the selected parameter. Again, the
        list is computed by splitting on commas.</li>
      <li><b>regexp:</b> The regexp-filter checks if the selected parameter value
        matches the regexp given in the value. Be careful!</li>
    </ul>
    <li><b>Value:</b> The filter value with different meaning depending on the
      operator</li>
  </ol>

<% end %>


