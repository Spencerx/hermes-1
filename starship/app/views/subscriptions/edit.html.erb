<h2>Basic Subscription Parameters</h2>
<h3>Subscription to notification type: <%= MsgType.find(@subscr.msg_type_id).type_desc %></h3>
<% form_for @subscr do |f| %>

<p>
  <label>Description:</label><%= text_field_tag('subscr[description]', @subscr.description, :size => 50 ) %>
</p>
<p>
  <label>Comment:</label><%= link_to_function( "Enter Comment", nil, :id => "comment_link") do |page|
     page[:comment_box].toggle()
     page[:comment_link].hide()
  end %> (to help you remember what happens here)
<div id="comment_box" style="display: none; margin-left: 11em;">
  <%= text_area('subscr','comment', :size => "50x3") %>
</div>
<p>
  <label>Delay:</label><%= collection_select('subscr', 'delay_id', @availDelay, 'id','name') %>
</p>
<p>
  <label>Delivery:</label><%=  collection_select('subscr','delivery_id', @availDeliveries, 'id','description') %>
</p>

<h2>Predefined Filters</h2>
<p>These filters are prepared by the Hermes system admin for you to pick. They should
  cover the most common use  cases.</p>
<div style="margin-left: 50px;">
<% FILTERABSTRACTIONS.each { |id, abstraction| %>
  <p><%= radio_button( "special", "filter", id ) %>&nbsp <%= abstraction.summary %><br/>
    <span style="margin-left: 30px; color: #999999;"><%= abstraction.description %></span>
  </p>
<% } %>
</div>

<h2>Parameter Filters</h2>
<p>Note that all filters are combined with logical AND, that means they must match
  all to make the notification happen</p>
<div style="margin-left:50px;">
<table>
  <tbody id="filter_table" style="">
      <tr>
        <td>Parameter</td>
        <td>Operator</td>
        <td></td>
        <td>Value(s)</td>
        <td></td>
        <td><%= link_to_function("Add Filter", nil, :id => 'add_filter_link') do |page|
             page.insert_html(:before, 'counter', :partial => 'filter', :locals => { :parameter_list => @avail_params, :selected_param => nil, :selected_oper => nil, :value => nil } )

                        end %>
        </td>
      </tr>
      <% @filters.each_with_index  { |filt,i| %>
        <%= render :partial => 'filter', :locals => {:parameter_list => @avail_params, :selected_param => filt.parameter_id, :selected_oper => filt.operator, :value => filt.filterstring} %>
      <% } %>

    <tr id='counter'><td><%= hidden_field_tag 'filter_count',@filters.size %></td></tr>

    <script type="text/javascript">
      recalc_filter_ids();
    </script>
  </tbody>
</table>
</div>

<p><%= submit_tag %></p>

<hr/>
<h3>Hints for Filter Creation</h3>

<p>Filters for subscriptions consist of three different settings:</p>
<ol>
<li><b>Parameter:</b> The first combo box contains a list of the parameters
  which belong to selected message type. The filter operation works on the 
  content of the parameter.</li>
<li><b>Operator:</b> The operator sets the type of the filter. There are some 
types of filters so far:</li>
  <ul>
   <li><b>oneof:</b>The oneof filter checks if the parameter value equals one
     of the list entries in value. The list of values is built by splitting the
     filter value at the commas.</li>
   <li><b>containsitem:</b> The containsitem filter checks if the list of
     filter values contains the value of the selected parameter. Again, the
     list is computed by splitting on commas.</li>
   <li><b>regexp:</b>The regexp-filter checks if the selected parameter value 
     matches the regexp given in the value. Be careful!</li>
  </ul>
  <li><b>Value:</b> The filter value with different meaning depending on the
  operator</li>
</ol>
</div>

<% end %>


